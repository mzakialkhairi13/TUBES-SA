# -*- coding: utf-8 -*-
"""TUBES SA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WrzSBPQqIZIRjfsPK5qalhyIoiUKkgz9

Tugas Besar Strategi Algoritma 

Anggota :

1.   Hanifan Nurul Haq (1301218609)
2.   Muhammad Zaki Alkhairi (1301218590)
3. Yolanda Stefani Putri br Purba (1301218602)



Kasus : Maximum Profit by buying and selling a share at most k times
Strategi : Greedy and Brute Force

Brute Force
"""

def maxProfit(prices):
  max_profit = 0
  for i in range(1,len(prices)):
      if prices[i] - prices[i-1] >0:
          max_profit+=(prices[i] - prices[i-1])
  return max_profit

prices = [80, 120, 65, 200, 430, 520, 600 ]
print('max profit: ', maxProfit(prices))

"""Greedy

Simple
"""

def maxProfit(prices):
  profit = 0
  for i in range(1, len(prices)):
      profit = max(profit, profit + prices[i] - prices[i-1])
  return profit

prices = [80, 120, 65, 200, 430, 520, 600 ]
print('max profit: ', maxProfit(prices))

def maxProfit(n, k, prices):
	ans = 0
	buy = 0
	sell = 0
	
	transaction = []
	profits = []

	while (sell < n):
		buy = sell

		while (buy < n - 1 and prices[buy] >= prices[buy + 1]):
			buy += 1

		sell = buy + 1

		while (sell < n and prices[sell] >= prices[sell - 1]):
			sell += 1

		while (len(transaction) !=0 and prices[buy] < prices[transaction[len(transaction)-1][0]]):
			p = transaction[len(transaction)-1]

			profits.append(prices[p[1] - 1] - prices[p[0]])

			transaction.remove(transaction[len(transaction)-1])

		profits.sort(reverse=True)
  
		while (len(transaction)!=0 and prices[sell - 1] > prices[transaction[len(transaction)-1][1] - 1]):
			p = transaction[len(transaction)-1]

			profits.append(prices[p[1] - 1] - prices[buy])
			buy = p[0]

			transaction.remove(transaction[len(transaction)-1])

		transaction.append([buy, sell])
	
	profits.sort(reverse=True)

	while (len(transaction) != 0):
		profits.append(prices[transaction[len(transaction)-1][1]- 1]-prices[transaction[len(transaction)-1][0]])
		transaction.remove(transaction[len(transaction)-1])

	profits.sort(reverse=True)

	while (k!=0 and len(profits)!=0):
		ans += profits[0]
		profits.remove(profits[0])
		k -= 1

	return ans


if __name__ == '__main__':
	k = 3
	prices = [80, 120, 65, 200, 430, 520, 600 ]
	n = len(prices)

	print("Maximum profit is",maxProfit(n, k, prices))